import { describe, it, expect, jest, beforeEach, afterEach } from "@jest/globals";
import React from "react";

// Mock Resend before importing anything
const mockSendFunction = jest.fn();
jest.mock("resend", () => ({
  Resend: jest.fn(() => ({
    emails: {
      send: mockSendFunction,
    },
  })),
}));

// Import after mocks are set up
import { sendEmail } from "./email";

describe("Email Module", () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Setup default successful response
    mockSendFunction.mockResolvedValue({
      data: { id: "email-id-123" },
      error: null,
    });
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  describe("sendEmail function", () => {
    it("should send email successfully with basic parameters", async () => {
      const email = "recipient@example.com";
      const subject = "Test Subject";
      const body = "Test email body";

      await sendEmail(email, subject, body);

      expect(mockSendFunction).toHaveBeenCalledWith({
        from: "UllrAI <hello@ullrai.com>",
        to: email,
        subject,
        react: <>{body}</>,
      });
    });

    it("should send email with React component body", async () => {
      const email = "user@example.com";
      const subject = "Welcome Email";
      const body = (
        <div>
          <h1>Welcome!</h1>
          <p>Thank you for joining us.</p>
        </div>
      );

      await sendEmail(email, subject, body);

      expect(mockSendFunction).toHaveBeenCalledWith({
        from: "UllrAI <hello@ullrai.com>",
        to: email,
        subject,
        react: <>{body}</>,
      });
    });

    it("should send email with string body", async () => {
      const email = "user@test.com";
      const subject = "Plain Text";
      const body = "This is a plain text email body.";

      await sendEmail(email, subject, body);

      expect(mockSendFunction).toHaveBeenCalledWith({
        from: "UllrAI <hello@ullrai.com>",
        to: email,
        subject,
        react: <>{body}</>,
      });
    });

    it("should handle error from Resend", async () => {
      const apiError = new Error("Resend API error");
      mockSendFunction.mockResolvedValue({
        data: null,
        error: apiError,
      });

      await expect(
        sendEmail("test@example.com", "Test Subject", "Test Body")
      ).rejects.toThrow("Resend API error");
    });

    it("should handle successful email sending", async () => {
      mockSendFunction.mockResolvedValue({
        data: { id: "email-sent-123" },
        error: null,
      });

      await expect(
        sendEmail("test@example.com", "Test Subject", "Test Body")
      ).resolves.not.toThrow();
    });
  });

  describe("Error Handling", () => {
    it("should throw error when Resend returns an error", async () => {
      const apiError = new Error("Resend API error");
      mockSendFunction.mockResolvedValue({
        data: null,
        error: apiError,
      });

      await expect(
        sendEmail("test@example.com", "Test Subject", "Test Body")
      ).rejects.toThrow("Resend API error");
    });

    it("should handle network errors", async () => {
      const networkError = new Error("Network error");
      mockSendFunction.mockRejectedValue(networkError);

      await expect(
        sendEmail("test@example.com", "Test Subject", "Test Body")
      ).rejects.toThrow("Network error");
    });
  });

  describe("Email Content", () => {
    it("should wrap body content in React fragment", async () => {
      const content = "Simple text content";
      
      await sendEmail("test@example.com", "Subject", content);
      
      expect(mockSendFunction).toHaveBeenCalledWith({
        from: "UllrAI <hello@ullrai.com>",
        to: "test@example.com",
        subject: "Subject",
        react: <>{content}</>,
      });
    });

    it("should handle React components as body", async () => {
      const component = <div><h1>Title</h1><p>Content</p></div>;
      
      await sendEmail("test@example.com", "Subject", component);
      
      expect(mockSendFunction).toHaveBeenCalledWith({
        from: "UllrAI <hello@ullrai.com>",
        to: "test@example.com",
        subject: "Subject",
        react: <>{component}</>,
      });
    });

    it("should handle null and undefined body", async () => {
      await sendEmail("test@example.com", "Subject", null);
      
      expect(mockSendFunction).toHaveBeenCalledWith({
        from: "UllrAI <hello@ullrai.com>",
        to: "test@example.com",
        subject: "Subject",
        react: <>{null}</>,
      });
    });
  });
});